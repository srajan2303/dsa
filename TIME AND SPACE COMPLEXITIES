SC:O(N) OF ALL DATA STRUCTURES

Data structure	Access	Search	Insertion	Deletion

Array           O(1)	   O(N)	    O(N)	    O(N)

Stack         	O(N)	   O(N)	    O(1)	    O(1)

Queue	          O(N)	   O(N)   	O(1)	    O(1)

Singly LL       O(N)	   O(N)	    O(1)	    O(1)

Doubly LL	      O(N)	   O(N)	    O(1)	    O(1)

Hash Table	    O(1)	   O(1)	    O(1)	    O(1)

BST	           O(log N)	O(log N)	O(log N)	O(log N)

AVL Tree	     O(log N)	O(log N)	O(log N)	O(log N)

B Tree	       O(log N)	O(log N)	O(log N)	O(log N)

Red Black Tree	O(log N)	O(log N)	O(log N)	O(log N)



Time Complexity for Searching element in MAP :
Time complexity for searching elements in std::map is O(log n). Even in worst case it will be O(log n) because elements are stored internally as Balanced Binary Search tree (BST).

Whereas, in std::unordered_map best case time complexity for searching is O(1). Where as, if hash code function is not good then, worst case complexity can be O(n) (In case all keys are in same bucket).


****SAME FOR SET****



